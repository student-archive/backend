/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package ru.giv.star.backend.api;

import ru.giv.star.backend.models.Account;
import ru.giv.star.backend.models.Error;
import ru.giv.star.backend.models.Group;
import ru.giv.star.backend.models.InlineResponse2001;
import ru.giv.star.backend.models.InlineResponse201;
import ru.giv.star.backend.models.InviteCode;
import ru.giv.star.backend.models.Role;
import ru.giv.star.backend.models.Speciality;
import ru.giv.star.backend.models.Subject;
import ru.giv.star.backend.models.Tutor;
import ru.giv.star.backend.models.UNKNOWN_BASE_TYPE;
import ru.giv.star.backend.models.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2022-03-17T11:30:21.915317900+03:00[Europe/Moscow]")
@Validated
@Api(value = "Persons", description = "the Persons API")
public interface PersonsApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * DELETE /account/{id} : Delete account Deletes exact account by its ID Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete account",
      nickname = "deleteAccountId",
      notes = "Deletes exact account by its ID Access level: Any user",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/account/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteAccountId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /group/{id} : Delete group Deletes group by ID Access level: Moderators only
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete group",
      nickname = "deleteGroupId",
      notes = "Deletes group by ID Access level: Moderators only",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/group/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteGroupId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /inviteCode/{id} : Invalidate an invite code Invalidates invite code by its ID Access
   * level: Any user
   *
   * @param id ID of invite code (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Invalidate an invite code",
      nickname = "deleteInviteCodeId",
      notes = "Invalidates invite code by its ID Access level: Any user",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/inviteCode/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteInviteCodeId(
      @ApiParam(value = "ID of invite code", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /speciality/{id} : Delete speciality Deletes speciality Access level: Moderators only
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete speciality",
      nickname = "deleteSpecialityId",
      notes = "Deletes speciality Access level: Moderators only",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/speciality/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteSpecialityId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /subject/{id} : Delete exact subject Deletes subject Access level: Captains+
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete exact subject",
      nickname = "deleteSubjectId",
      notes = "Deletes subject Access level: Captains+",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/subject/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteSubjectId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * DELETE /tutor/{id} : Delete tutor Deletes tutor Access level: Captains+
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete tutor",
      nickname = "deleteTutorId",
      notes = "Deletes tutor Access level: Captains+",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/tutor/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteTutorId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /account/{id} : Get exact account Gets exact account by its ID Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get exact account",
      nickname = "getAccountId",
      notes = "Gets exact account by its ID Access level: Any user",
      response = Account.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Account.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/account/{id}",
      produces = {"application/json"})
  default ResponseEntity<Account> getAccountId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /group/{id} : Get exact group Get exact group by its ID Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get exact group",
      nickname = "getGroupId",
      notes = "Get exact group by its ID Access level: Any user",
      response = Group.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Group.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/group/{id}",
      produces = {"application/json"})
  default ResponseEntity<Group> getGroupId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /groups : Get list of groups Gets list of created groups Access level: Moderators only
   *
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Get list of groups",
      nickname = "getGroups",
      notes = "Gets list of created groups Access level: Moderators only",
      response = Group.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Group.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @GetMapping(
      value = "/groups",
      produces = {"application/json"})
  default ResponseEntity<List<Group>> getGroups() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /roles : Get list of available roles Gets list of available roles Access level: Captains+
   *
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Get list of available roles",
      nickname = "getRoles",
      notes = "Gets list of available roles Access level: Captains+",
      response = Role.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Role.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @GetMapping(
      value = "/roles",
      produces = {"application/json"})
  default ResponseEntity<List<Role>> getRoles() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /specialities : Get list of specialities Gets all created specialities Access level:
   * Moderators only
   *
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Get list of specialities",
      nickname = "getSpecialities",
      notes = "Gets all created specialities Access level: Moderators only",
      response = Speciality.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Speciality.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @GetMapping(
      value = "/specialities",
      produces = {"application/json"})
  default ResponseEntity<List<Speciality>> getSpecialities() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /speciality/{id} : Get exact speciality Gets exact speciality by its ID Access level:
   * Moderators only
   *
   * @param id (required)
   * @return OK (status code 200)
   */
  @ApiOperation(
      value = "Get exact speciality",
      nickname = "getSpecialityId",
      notes = "Gets exact speciality by its ID Access level: Moderators only",
      response = Speciality.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "OK", response = Speciality.class)})
  @GetMapping(
      value = "/speciality/{id}",
      produces = {"application/json"})
  default ResponseEntity<Speciality> getSpecialityId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /subject/{id} : Get exact subject Gets information about subject Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get exact subject",
      nickname = "getSubjectId",
      notes = "Gets information about subject Access level: Any user",
      response = Subject.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Subject.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/subject/{id}",
      produces = {"application/json"})
  default ResponseEntity<Subject> getSubjectId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /subjects/{groupId} : Get list of subjects in a group Gets list of subject in a group
   * Access level: Any user
   *
   * @param groupId (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get list of subjects in a group",
      nickname = "getSubjectsGroupId",
      notes = "Gets list of subject in a group Access level: Any user",
      response = Subject.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Subject.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/subjects/{groupId}",
      produces = {"application/json"})
  default ResponseEntity<List<Subject>> getSubjectsGroupId(
      @ApiParam(value = "", required = true) @PathVariable("groupId") String groupId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /tutor/{id} : Get exact tutor Gets exact tutor Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get exact tutor",
      nickname = "getTutorId",
      notes = "Gets exact tutor Access level: Any user",
      response = Tutor.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Tutor.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/tutor/{id}",
      produces = {"application/json"})
  default ResponseEntity<Tutor> getTutorId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /tutors/{subjectId} : Get list of tutors in subject Gets list of tutors in a subject Access
   * level: Any user
   *
   * @param subjectId (required)
   * @return OK (status code 200)
   */
  @ApiOperation(
      value = "Get list of tutors in subject",
      nickname = "getTutorsSubjectId",
      notes = "Gets list of tutors in a subject Access level: Any user",
      response = Tutor.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Tutor.class, responseContainer = "List")
      })
  @GetMapping(
      value = "/tutors/{subjectId}",
      produces = {"application/json"})
  default ResponseEntity<List<Tutor>> getTutorsSubjectId(
      @ApiParam(value = "", required = true) @PathVariable("subjectId") String subjectId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /user/{id} : Get exact user Gets user model by its ID Access level: Any user
   *
   * @param id (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get exact user",
      nickname = "getUserId",
      notes = "Gets user model by its ID Access level: Any user",
      response = User.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/user/{id}",
      produces = {"application/json"})
  default ResponseEntity<User> getUserId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /whoami : Gets username of current user Gets username of current user Access level: Any
   * user
   *
   * @return Example response (status code 200) or Unauthorized (status code 401)
   */
  @ApiOperation(
      value = "Gets username of current user",
      nickname = "getWhoami",
      notes = "Gets username of current user Access level: Any user",
      response = InlineResponse2001.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "Example response", response = InlineResponse2001.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class)
      })
  @GetMapping(
      value = "/whoami",
      produces = {"application/json"})
  default ResponseEntity<InlineResponse2001> getWhoami() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString = "{ \"username\" : \"username\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /account/{id} : Update account information Updates exact account by its ID Access level:
   * Any user
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code 401)
   *     or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Update account information",
      nickname = "patchAccountId",
      notes = "Updates exact account by its ID Access level: Any user",
      response = Account.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Account.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PatchMapping(
      value = "/account/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Account> patchAccountId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /group/{id} : Update group information Updates group information Access level: Captains+
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code 401)
   *     or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Update group information",
      nickname = "patchGroupId",
      notes = "Updates group information Access level: Captains+",
      response = Group.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Group.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PatchMapping(
      value = "/group/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Group> patchGroupId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /speciality/{id} : Update speciality Updates speciality information Access level:
   * Moderators only
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200)
   */
  @ApiOperation(
      value = "Update speciality",
      nickname = "patchSpecialityId",
      notes = "Updates speciality information Access level: Moderators only",
      response = Speciality.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(value = {@ApiResponse(code = 200, message = "OK", response = Speciality.class)})
  @PatchMapping(
      value = "/speciality/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Speciality> patchSpecialityId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /subject/{id} : Update exact subject Updates information about subject Access level:
   * Captains+
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code 401)
   *     or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Update exact subject",
      nickname = "patchSubjectId",
      notes = "Updates information about subject Access level: Captains+",
      response = Subject.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Subject.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PatchMapping(
      value = "/subject/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Subject> patchSubjectId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /tutor/{id} : Update tutor Updates tutor information Access level: Captains+
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Update tutor",
      nickname = "patchTutorId",
      notes = "Updates tutor information Access level: Captains+",
      response = Tutor.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Tutor.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PatchMapping(
      value = "/tutor/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Tutor> patchTutorId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /user/{id} : Update user&#39;s information Updates user information Access level: Any
   * user
   *
   * @param id (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return OK (status code 200) or Bad Request (status code 400) or Unauthorized (status code 401)
   *     or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Update user's information",
      nickname = "patchUserId",
      notes = "Updates user information Access level: Any user",
      response = Error.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Error.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PatchMapping(
      value = "/user/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Error> patchUserId(
      @ApiParam(value = "", required = true) @PathVariable("id") String id,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"errorDescription\" : \"errorDescription\", \"errorCode\" : \"errorCode\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /accounts : Create new account Creates new account Access level: No auth
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Conflict (status code
   *     409)
   */
  @ApiOperation(
      value = "Create new account",
      nickname = "postAccounts",
      notes = "Creates new account Access level: No auth",
      response = Account.class,
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Account.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict", response = Error.class)
      })
  @PostMapping(
      value = "/accounts",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Account> postAccounts(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /accounts/login : Authenticate user Authenticates user Access level: No auth
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Example response (status code 201) or Bad Request (status code 400) or Unauthorized
   *     (status code 401)
   */
  @ApiOperation(
      value = "Authenticate user",
      nickname = "postAccountsLogin",
      notes = "Authenticates user Access level: No auth",
      response = InlineResponse201.class,
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Example response", response = InlineResponse201.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class)
      })
  @PostMapping(
      value = "/accounts/login",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<InlineResponse201> postAccountsLogin(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString = "{ \"jwt\" : \"jwt\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /groups : Create new group Creates new group Access level: Moderators only
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Create new group",
      nickname = "postGroups",
      notes = "Creates new group Access level: Moderators only",
      response = Group.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Group.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PostMapping(
      value = "/groups",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Group> postGroups(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /inviteCode : Generate invite code Generates new invite code and returns it Access level:
   * Captains+
   *
   * @return Created (status code 201) or Unauthorized (status code 401) or Forbidden (status code
   *     403)
   */
  @ApiOperation(
      value = "Generate invite code",
      nickname = "postInviteCode",
      notes = "Generates new invite code and returns it Access level: Captains+",
      response = InviteCode.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = InviteCode.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PostMapping(
      value = "/inviteCode",
      produces = {"application/json"})
  default ResponseEntity<InviteCode> postInviteCode() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"inviteCode\" : \"inviteCode\", \"isValid\" : true, \"id\" : \"c02221c7-f761-4680-a414-8eb49984e138\", \"activatedDate\" : 1647159287, \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /specialities : Create new speciality Creates new speciality Access level: Moderators only
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Create new speciality",
      nickname = "postSpecialities",
      notes = "Creates new speciality Access level: Moderators only",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PostMapping(
      value = "/specialities",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Void> postSpecialities(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /subjects/{groupId} : Create new subject in a group Creates new subject for a group Access
   * level: Captains+
   *
   * @param groupId (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new subject in a group",
      nickname = "postSubjectsGroupId",
      notes = "Creates new subject for a group Access level: Captains+",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/subjects/{groupId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Void> postSubjectsGroupId(
      @ApiParam(value = "", required = true) @PathVariable("groupId") String groupId,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /tutors/{subjectId} : Create new tutor for subject Creates new tutor for subject Access
   * level: Captains+
   *
   * @param subjectId (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new tutor for subject",
      nickname = "postTutorsSubjectId",
      notes = "Creates new tutor for subject Access level: Captains+",
      response = Tutor.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Tutor.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/tutors/{subjectId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Tutor> postTutorsSubjectId(
      @ApiParam(value = "", required = true) @PathVariable("subjectId") String subjectId,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /users : Create new user Creates new user Access level: No auth
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Create new user",
      nickname = "postUsers",
      notes = "Creates new user Access level: No auth",
      response = User.class,
      tags = {
        "persons",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = User.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PostMapping(
      value = "/users",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<User> postUsers(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
