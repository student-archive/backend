/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package ru.giv.star.backend.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import ru.giv.star.backend.models.Error;
import ru.giv.star.backend.models.Event;
import ru.giv.star.backend.models.EventPriority;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2022-03-17T11:30:21.915317900+03:00[Europe/Moscow]")
@Validated
@Api(value = "Events", description = "the Events API")
public interface EventsApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * DELETE /event/{id} : Delete event by its id Deletes exact event by its id Access level:
   * Captains+
   *
   * @param id uuid of event (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete event by its id",
      nickname = "deleteEvent",
      notes = "Deletes exact event by its id Access level: Captains+",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/event/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteEvent(
      @ApiParam(value = "uuid of event", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /event/{id} : Get event by its id Gets exact event by its id Access level: Captains+
   *
   * @param id uuid of event (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get event by its id",
      nickname = "get",
      notes = "Gets exact event by its id Access level: Captains+",
      response = Event.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Event.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/event/{id}",
      produces = {"application/json"})
  default ResponseEntity<Event> get(
      @ApiParam(value = "uuid of event", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"eventText\" : \"eventText\", \"eventDescription\" : \"eventDescription\", \"id\" : \"5cbf66de-9a4e-4380-beac-2421f9a26cf4\", \"eventPriority\" : { \"priorityName\" : \"priorityName\", \"priorityDescription\" : \"priorityDescription\", \"id\" : \"aa85581d-ef4e-416c-a730-8a3f55ee6396\" }, \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }, \"eventDate\" : 1647159287 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /events/{group} : Get events Get events of group by its ID Access level: Captains+
   *
   * @param group ID of group (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get events",
      nickname = "getEvent",
      notes = "Get events of group by its ID Access level: Captains+",
      response = Event.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Event.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/events/{group}",
      produces = {"application/json"})
  default ResponseEntity<List<Event>> getEvent(
      @ApiParam(value = "ID of group", required = true) @PathVariable("group") String group) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"eventText\" : \"eventText\", \"eventDescription\" : \"eventDescription\", \"id\" : \"5cbf66de-9a4e-4380-beac-2421f9a26cf4\", \"eventPriority\" : { \"priorityName\" : \"priorityName\", \"priorityDescription\" : \"priorityDescription\", \"id\" : \"aa85581d-ef4e-416c-a730-8a3f55ee6396\" }, \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }, \"eventDate\" : 1647159287 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /eventPriorities : Get list of priorities Gets list of available priorities Access level:
   * Captains+
   *
   * @return OK (status code 200) or Unauthorized (status code 401)
   */
  @ApiOperation(
      value = "Get list of priorities",
      nickname = "getEventPriorities",
      notes = "Gets list of available priorities Access level: Captains+",
      response = EventPriority.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = EventPriority.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class)
      })
  @GetMapping(
      value = "/eventPriorities",
      produces = {"application/json"})
  default ResponseEntity<List<EventPriority>> getEventPriorities() {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"priorityName\" : \"priorityName\", \"priorityDescription\" : \"priorityDescription\", \"id\" : \"aa85581d-ef4e-416c-a730-8a3f55ee6396\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * PATCH /event/{id} : Update event by its id Updates exact event by its id Access level:
   * Captains+
   *
   * @param id uuid of event (required)
   * @param UNKNOWN_BASE_TYPE Body for POST request to create new event (optional)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Update event by its id",
      nickname = "patchEvent",
      notes = "Updates exact event by its id Access level: Captains+",
      response = Event.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Event.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PatchMapping(
      value = "/event/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Event> patchEvent(
      @ApiParam(value = "uuid of event", required = true) @PathVariable("id") String id,
      @ApiParam(value = "Body for POST request to create new event")
          @Valid
          @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"eventText\" : \"eventText\", \"eventDescription\" : \"eventDescription\", \"id\" : \"5cbf66de-9a4e-4380-beac-2421f9a26cf4\", \"eventPriority\" : { \"priorityName\" : \"priorityName\", \"priorityDescription\" : \"priorityDescription\", \"id\" : \"aa85581d-ef4e-416c-a730-8a3f55ee6396\" }, \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }, \"eventDate\" : 1647159287 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /events/{group} : Create event Creates event Access level: Captains+
   *
   * @param group ID of group (required)
   * @param UNKNOWN_BASE_TYPE Body for POST request to create new event (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403)
   */
  @ApiOperation(
      value = "Create event",
      nickname = "postEvent",
      notes = "Creates event Access level: Captains+",
      response = Event.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "events",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Event.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class)
      })
  @PostMapping(
      value = "/events/{group}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Event> postEvent(
      @ApiParam(value = "ID of group", required = true) @PathVariable("group") String group,
      @ApiParam(value = "Body for POST request to create new event")
          @Valid
          @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"eventText\" : \"eventText\", \"eventDescription\" : \"eventDescription\", \"id\" : \"5cbf66de-9a4e-4380-beac-2421f9a26cf4\", \"eventPriority\" : { \"priorityName\" : \"priorityName\", \"priorityDescription\" : \"priorityDescription\", \"id\" : \"aa85581d-ef4e-416c-a730-8a3f55ee6396\" }, \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" }, \"eventDate\" : 1647159287 }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
