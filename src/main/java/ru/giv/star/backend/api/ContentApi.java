/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package ru.giv.star.backend.api;

import ru.giv.star.backend.models.Attachment;
import ru.giv.star.backend.models.Employee;
import ru.giv.star.backend.models.Error;
import ru.giv.star.backend.models.InlineResponse200;
import ru.giv.star.backend.models.Page;
import ru.giv.star.backend.models.Software;
import ru.giv.star.backend.models.Trash;
import ru.giv.star.backend.models.UNKNOWN_BASE_TYPE;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2022-03-17T11:30:21.915317900+03:00[Europe/Moscow]")
@Validated
@Api(value = "Content", description = "the Content API")
public interface ContentApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * DELETE /trash/{id} : Restore content from trash Restore content from trash Access level:
   * Captains+
   *
   * @param id id of deleted content (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Restore content from trash",
      nickname = "deleteTrashId",
      notes = "Restore content from trash Access level: Captains+",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @DeleteMapping(
      value = "/trash/{id}",
      produces = {"application/json"})
  default ResponseEntity<Void> deleteTrashId(
      @ApiParam(value = "id of deleted content", required = true) @PathVariable("id") String id) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /attachments/{subjectId} : Get all attachments in subject Get all attachments in subject by
   * its ID Access level: Any user
   *
   * @param subjectId ID of subject (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get all attachments in subject",
      nickname = "getAttachments",
      notes = "Get all attachments in subject by its ID Access level: Any user",
      response = Attachment.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Attachment.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/attachments/{subjectId}",
      produces = {"application/json"})
  default ResponseEntity<List<Attachment>> getAttachments(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subjectId")
          String subjectId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /employees/{specialtyId} : Get all employees in a specialty Get all employees in a
   * specialty Access level: Any user
   *
   * @param specialtyId ID of specialty (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get all employees in a specialty",
      nickname = "getEmployees",
      notes = "Get all employees in a specialty Access level: Any user",
      response = Employee.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Employee.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/employees/{specialtyId}",
      produces = {"application/json"})
  default ResponseEntity<List<Employee>> getEmployees(
      @ApiParam(value = "ID of specialty", required = true) @PathVariable("specialtyId")
          String specialtyId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"link\" : \"link\", \"id\" : \"9a611d64-37b7-40ff-a25d-5f310d4759cc\", \"position\" : \"position\", \"specialities\" : [ { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" } ], \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /pages/{subject} : Get pages by subject Get list of pages in subject by its ID Access
   * level: Any user
   *
   * @param subject ID of subject (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get pages by subject",
      nickname = "getPages",
      notes = "Get list of pages in subject by its ID Access level: Any user",
      response = Page.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "OK", response = Page.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/pages/{subject}",
      produces = {"application/json"})
  default ResponseEntity<List<Page>> getPages(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subject") String subject) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"attachments\" : [ { \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } }, { \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } } ], \"subject\" : { \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }, \"link\" : \"link\", \"id\" : \"b242e845-d182-4e85-b03c-b3e97000b483\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /softwares/{subjectId} : Get list of created softwares in the subject Gets list of created
   * softwares in the exact subject by its ID Access level: Any user
   *
   * @param subjectId ID of subject (required)
   * @return OK (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403)
   *     or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get list of created softwares in the subject",
      nickname = "getSoftwares",
      notes =
          "Gets list of created softwares in the exact subject by its ID Access level: Any user",
      response = Software.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 200,
            message = "OK",
            response = Software.class,
            responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/softwares/{subjectId}",
      produces = {"application/json"})
  default ResponseEntity<List<Software>> getSoftwares(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subjectId")
          String subjectId) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"subject\" : { \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }, \"link\" : \"link\", \"id\" : \"ac29b22b-4338-4edc-8332-a045bc0fc9ce\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /trash/{id} : Get information about deleted content Get information about deleted content
   * Access level: Editors+
   *
   * @param id id of deleted content (required)
   * @return (status code 200) or Unauthorized (status code 401) or Forbidden (status code 403) or
   *     Not Found (status code 404)
   */
  @ApiOperation(
      value = "Get information about deleted content",
      nickname = "getTrashId",
      notes = "Get information about deleted content Access level: Editors+",
      response = InlineResponse200.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 200, message = "", response = InlineResponse200.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @GetMapping(
      value = "/trash/{id}",
      produces = {"application/json"})
  default ResponseEntity<InlineResponse200> getTrashId(
      @ApiParam(value = "id of deleted content", required = true) @PathVariable("id") String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString = "{ \"id\" : \"id\", \"deletedContent\" : \"\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /attachments/{subjectId} : Create new attachment in the subject Create new attachment in
   * the exact subject by its ID Access level: Captains+
   *
   * @param subjectId ID of subject (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new attachment in the subject",
      nickname = "postNewAttachment",
      notes = "Create new attachment in the exact subject by its ID Access level: Captains+",
      response = Attachment.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Created",
            response = Attachment.class,
            responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/attachments/{subjectId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<List<Attachment>> postNewAttachment(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subjectId")
          String subjectId,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /employees/{specialtyId} : Create new employee Creates new employee Access level:
   * Captains+
   *
   * @param specialtyId ID of specialty (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new employee",
      nickname = "postNewEmployee",
      notes = "Creates new employee Access level: Captains+",
      response = Employee.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Created",
            response = Employee.class,
            responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/employees/{specialtyId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<List<Employee>> postNewEmployee(
      @ApiParam(value = "ID of specialty", required = true) @PathVariable("specialtyId")
          String specialtyId,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"link\" : \"link\", \"id\" : \"9a611d64-37b7-40ff-a25d-5f310d4759cc\", \"position\" : \"position\", \"specialities\" : [ { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" } ], \"patronym\" : \"patronym\", \"email\" : \"email\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /pages/{subject} : Create new page Create new pages and return it Access level: Captains+
   *
   * @param subject ID of subject (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new page",
      nickname = "postPages",
      notes = "Create new pages and return it Access level: Captains+",
      response = Page.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Page.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/pages/{subject}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Page> postPages(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subject") String subject,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"attachments\" : [ { \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } }, { \"link\" : \"link\", \"id\" : \"2ceacea5-6831-48f0-856a-3551d375fd89\", \"type\" : { \"typeName\" : \"typeName\", \"id\" : \"383a40fd-9fdb-467b-a1bb-1b1432fa73e0\" } } ], \"subject\" : { \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }, \"link\" : \"link\", \"id\" : \"b242e845-d182-4e85-b03c-b3e97000b483\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /softwares/{subjectId} : Create new software link in a subject by its ID Create new
   * software link in a subject by its ID Access level: Captains+
   *
   * @param subjectId ID of subject (required)
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Create new software link in a subject by its ID",
      nickname = "postSoftware",
      notes = "Create new software link in a subject by its ID Access level: Captains+",
      response = Software.class,
      responseContainer = "List",
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(
            code = 201,
            message = "Created",
            response = Software.class,
            responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/softwares/{subjectId}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<List<Software>> postSoftware(
      @ApiParam(value = "ID of subject", required = true) @PathVariable("subjectId")
          String subjectId,
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"subject\" : { \"tutors\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"phone\" : \"phone\", \"subjects\" : [ null, null ], \"link\" : \"link\", \"id\" : \"8fae1554-9e9c-4ea3-8104-35ad1d97a05c\", \"patronym\" : \"patronym\", \"email\" : \"email\" } ], \"semester\" : 3, \"id\" : \"0b5f18cd-3907-4fd1-b64f-bd5d44fc5f66\", \"subjectName\" : \"subjectName\", \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }, \"link\" : \"link\", \"id\" : \"ac29b22b-4338-4edc-8332-a045bc0fc9ce\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /trash : Delete element to trash Deletes element to trash Access level: Captains only
   *
   * @param UNKNOWN_BASE_TYPE (optional)
   * @return Created (status code 201) or Bad Request (status code 400) or Unauthorized (status code
   *     401) or Forbidden (status code 403) or Not Found (status code 404)
   */
  @ApiOperation(
      value = "Delete element to trash",
      nickname = "postTrash",
      notes = "Deletes element to trash Access level: Captains only",
      response = Trash.class,
      authorizations = {@Authorization(value = "Authorization")},
      tags = {
        "content",
      })
  @ApiResponses(
      value = {
        @ApiResponse(code = 201, message = "Created", response = Trash.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden", response = Error.class),
        @ApiResponse(code = 404, message = "Not Found", response = Error.class)
      })
  @PostMapping(
      value = "/trash",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<Trash> postTrash(
      @ApiParam(value = "") @Valid @RequestBody(required = false)
          UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"deletedId\" : \"115e1da5-6dfd-41dc-818f-184c59b4714e\", \"id\" : \"2a1dbd41-b900-4d0a-9180-5fe58e569dc4\", \"deleteDate\" : 1647159287, \"group\" : { \"speciality\" : { \"specialityName\" : \"specialityName\", \"id\" : \"f2dd849d-0daa-4a05-89df-078946aaade9\" }, \"students\" : [ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"role\" : { \"roleName\" : \"roleName\", \"id\" : \"edfc5608-30b2-4408-bd87-5d0fa260bc4b\", \"roleDescription\" : \"roleDescription\" }, \"id\" : \"id\", \"account\" : { \"id\" : \"99167df3-123e-4d1b-9542-3950c7eeef28\", \"lastLoginDate\" : 1647159287, \"passwordHash\" : \"passwordHash\", \"username\" : \"ejik\" } } ], \"id\" : \"b3120bb1-02f4-4260-b93f-ceca1fdd286d\", \"groupNumber\" : \"groupNumber\" } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
